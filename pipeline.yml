resource_types:
- name: concourse-pipeline
  type: docker-image
  source:
    repository: concourse/concourse-pipeline-resource

resources:
- name: citrus-rind-pipeline
  type: concourse-pipeline
  source:
    teams:
    - name: main
      username: ((concourse-main-username))
      password: ((concourse-main-password))
- name: github-cr-pipeline
  type: git
  source:
    uri: https://github.com/Bit-Clouded/CitrusRind.git
    branch: ci/concourse
    paths: ['pipeline.yml']

- name: github-cr-golang-build-container
  type: git
  source:
    uri: https://github.com/Bit-Clouded/CitrusRind.git
    branch: ci/concourse
    paths: ['build-images/golang/*']
- name: github-cr-alb-rule-assigner
  type: git
  source:
    uri: https://github.com/Bit-Clouded/CitrusRind.git
    branch: ci/concourse
    paths: ['alb-rule-assigner/*', 'alb-rule-assigner/**/*']

- name: golang-build-container
  type: docker-image
  source:
    repository: 458712717391.dkr.ecr.us-west-2.amazonaws.com/test
    access_key_id: ((aws-key-id))
    secret_access_key: ((aws-key-secret))

- name: lambda-bucket
  type: s3
  source:
    bucket: prod-cicd-utility-1ldh9ghpynaoc
    region_name: us-west-2
    access_key_id: ((aws-key-id))
    secret_access_key: ((aws-key-secret))
    regexp: alb-priority-assigner/default-(.*).zip
    initial_path: alb-priority-assigner/default-0.0.0.zip

- name: lambda-ver
  type: semver
  source:
    bucket: prod-cicd-utility-1ldh9ghpynaoc
    region_name: us-west-2
    access_key_id: ((aws-key-id))
    secret_access_key: ((aws-key-secret))
    key: alb-priority-assigner/semver
    initial_version: 0.0.0

jobs:

  - name: set-my-pipelines
    plan:
      - get: github-cr-pipeline
        trigger: true
      - put: citrus-rind-pipeline
        params:
          pipelines:
          - name: citrus-rind
            unpaused: true
            team: main
            config_file: github-cr-pipeline/pipeline.yml

  - name: build-container
    public: true
    plan:
      - get: github-cr-pipeline
        passed: ['set-my-pipelines']
        trigger: false
      - get: github-cr-golang-build-container
        trigger: true
      - put: golang-build-container
        params:
          build: github-cr-golang-build-container/build-images/golang
  - name: build-lambda
    public: true
    plan:
      - get: golang-build-container
        passed: ['build-container']
        trigger: true
      - get: github-cr-alb-rule-assigner
        trigger: true
      - get: lambda-ver
        params: {pre: rc}
      - task: build
        image: golang-build-container
        file: github-cr-alb-rule-assigner/alb-rule-assigner/build-task.yml
      - put: lambda-bucket
        params:
          file: lambda-zip/default-*.zip
      - put: lambda-ver
        params:
          file: lambda-ver/number
  - name: release-promote
    public: true
    plan:
      - get: golang-build-container
        passed: ['build-container']
        trigger: false
      - get: lambda-ver
        params: {bump: final}
        passed: ['build-lambda']
        trigger: false
      - get: lambda-bucket
        params:
          file: lambda-zip/default-*.zip
        passed: ['build-lambda']
        trigger: false
      - task: rename
        image: golang-build-container
        config:
          platform: linux
          inputs:
            - name: lambda-ver
            - name: lambda-bucket
          run:
            path: /bin/sh
            args:
              - -c
              - |
                mv ./lambda-bucket/default-*.zip ./lambda-zip/default-$(cat ./lambda-ver/number).zip
          outputs:
            - name: lambda-zip
      - put: lambda-bucket
        params:
          file: lambda-zip/default-*.zip
      - put: lambda-ver
        params:
          file: lambda-ver/number
      - put: lambda-ver
        params:
          bump: patch
